/*
 * This file is generated by jOOQ.
 */
package com.jooq.tables;


import com.jooq.DefaultSchema;
import com.jooq.Keys;
import com.jooq.tables.records.UserMasterRecord;

import java.util.Arrays;
import java.util.List;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Identity;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Row5;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class UserMaster extends TableImpl<UserMasterRecord> {

    private static final long serialVersionUID = -858915460;

    /**
     * The reference instance of <code>user_master</code>
     */
    public static final UserMaster USER_MASTER = new UserMaster();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<UserMasterRecord> getRecordType() {
        return UserMasterRecord.class;
    }

    /**
     * The column <code>user_master.user_id</code>.
     */
    public final TableField<UserMasterRecord, Integer> USER_ID = createField(DSL.name("user_id"), org.jooq.impl.SQLDataType.INTEGER.nullable(false).identity(true), this, "");

    /**
     * The column <code>user_master.first_name</code>.
     */
    public final TableField<UserMasterRecord, String> FIRST_NAME = createField(DSL.name("first_name"), org.jooq.impl.SQLDataType.VARCHAR(20).nullable(false), this, "");

    /**
     * The column <code>user_master.last_name</code>.
     */
    public final TableField<UserMasterRecord, String> LAST_NAME = createField(DSL.name("last_name"), org.jooq.impl.SQLDataType.VARCHAR(20).nullable(false), this, "");

    /**
     * The column <code>user_master.user_name</code>.
     */
    public final TableField<UserMasterRecord, String> USER_NAME = createField(DSL.name("user_name"), org.jooq.impl.SQLDataType.VARCHAR(20).nullable(false), this, "");

    /**
     * The column <code>user_master.password</code>.
     */
    public final TableField<UserMasterRecord, String> PASSWORD = createField(DSL.name("password"), org.jooq.impl.SQLDataType.VARCHAR(20).nullable(false), this, "");

    /**
     * Create a <code>user_master</code> table reference
     */
    public UserMaster() {
        this(DSL.name("user_master"), null);
    }

    /**
     * Create an aliased <code>user_master</code> table reference
     */
    public UserMaster(String alias) {
        this(DSL.name(alias), USER_MASTER);
    }

    /**
     * Create an aliased <code>user_master</code> table reference
     */
    public UserMaster(Name alias) {
        this(alias, USER_MASTER);
    }

    private UserMaster(Name alias, Table<UserMasterRecord> aliased) {
        this(alias, aliased, null);
    }

    private UserMaster(Name alias, Table<UserMasterRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table());
    }

    public <O extends Record> UserMaster(Table<O> child, ForeignKey<O, UserMasterRecord> key) {
        super(child, key, USER_MASTER);
    }

    @Override
    public Schema getSchema() {
        return DefaultSchema.DEFAULT_SCHEMA;
    }

    @Override
    public Identity<UserMasterRecord, Integer> getIdentity() {
        return Keys.IDENTITY_USER_MASTER;
    }

    @Override
    public UniqueKey<UserMasterRecord> getPrimaryKey() {
        return Keys.CONSTRAINT_E;
    }

    @Override
    public List<UniqueKey<UserMasterRecord>> getKeys() {
        return Arrays.<UniqueKey<UserMasterRecord>>asList(Keys.CONSTRAINT_E);
    }

    @Override
    public UserMaster as(String alias) {
        return new UserMaster(DSL.name(alias), this);
    }

    @Override
    public UserMaster as(Name alias) {
        return new UserMaster(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public UserMaster rename(String name) {
        return new UserMaster(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public UserMaster rename(Name name) {
        return new UserMaster(name, null);
    }

    // -------------------------------------------------------------------------
    // Row5 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row5<Integer, String, String, String, String> fieldsRow() {
        return (Row5) super.fieldsRow();
    }
}
